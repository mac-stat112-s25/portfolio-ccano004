---
title: "Joining In-class-activity 3/5/25"
---

```{r}
#Example 1: made up data about students and course enrollments
students_1 <- data.frame(
  student = c("A", "B", "C"),
  class = c("STAT 101", "GEOL 101", "ANTH 101"))

# Check it out
students_1

enrollments_1 <- data.frame(
  class = c("STAT 101", "ART 101", "GEOL 101"),
  enrollment = c(18, 17, 24))

# Check it out
enrollments_1
#GOAL is to combine this data. Can use left , inner, or full join
```

```{r}
#left_join() function: 
#Keeps all observations from the left, but discards any observations in the right that do not have a match in the left.1
library(tidyverse)
students_1 |> 
  left_join(enrollments_1)

enrollments_1 |>
  left_join(students_1)
```

```{r}
# inner_join()
# Keeps only the observations from the left with a match in the right.
students_1 |> 
  inner_join(enrollments_1)
#This removed the row that did not match up / had NA values

```
```{r}
#full_join() # keeps all observations from left and right
students_1 |> 
  full_join(enrollments_1)

enrollments_1 |>
  full_join(students_1)

#Joined the complete datasets even rows that did not match up
```

```{r}
#11.4 Filtering Joins: semi, anti 

students_1 |> 
  semi_join(enrollments_1)

enrollments_1 |>
  semi_join(students_1)

# semi_join() Discards any observations in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case.

```
```{r}
#anti_join()
# Discards any observations in the left table that DO have a match in the right table.
students_1
enrollments_1

students_1 |> 
  anti_join(enrollments_1)
```

```{r}
# Exercise 1: Where are my keys? # Part a
# Define two new datasets, with different students and courses:
students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

# Check it out
students_2

enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

# Check it out
enrollments_2



#students_2 |> 
#  left_join(enrollments_2)
#This produces error and does not join because "class" and "course" varibles from datasets are named differently. Fix by:

students_2 |> 
  left_join(enrollments_2, join_by(class == course))
#order is important: "left variable name" = "right variable name"

```
```{r}
# Part C: Define another set of fake data which adds grade information:
# Add student grades in each course
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

# Check it out
students_3


# Add average grades in each course
enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

# Check it out
enrollments_3

students_3 |> 
  left_join(enrollments_3, join_by(class == class))
#This will specify to only join them by class because the grade variable in each measures to different things. However adds both to joined dataset
#grade.x = grade from first dataset
#grade.y = grade from second dataset

```

```{r}
#Exercise 2: More small practice with fake data

# People who have voted
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)
voters

# Contact info for voting age adults
contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)
contact

# 1. We want contact info for people who HAVEN'T voted
contact |>
  anti_join(voters, join_by(name == id))

# 2. We want contact info for people who HAVE voted
contact |>
  semi_join(voters, join_by(name == id))

# 3. We want any data available on each person
contact |> 
  full_join(voters, join_by(name == id))
#or
voters |> 
  full_join(contact, join_by(id == name))

# 4. When possible, we want to add contact info to the voting roster
voters |> 
  left_join(contact, join_by(id == name))

```
