---
title: "Spatial Viz"
---

Use this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.

```{r}


#6.1 & 6.2 Review Simpson's Paradox
# Load tidyverse package for plotting and wrangling
library(tidyverse)

# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |> 
  mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |> 
  filter(address != "c")

# Check it out
head(energy)

ggplot(energy, aes(x = therms, fill = address)) + 
  geom_density(alpha = 0.5)

ggplot(energy, aes(x = date, y = therms, color = address)) + geom_point() 

# When hdd was higher (aka it was colder outside), helps explain why energy use increased after renovations.
ggplot(energy, aes(y = hdd, x = renovated)) + 
  geom_boxplot() + 
  facet_wrap(~ address)
```

```{r}
#6.3 NEW STUFF: 3 types of spatial viz: Point maps, Contour Maps, Choropleth maps

fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")

head(fave_places)

#loading leaflet package necessary to make maps
library(leaflet)

#Loads the plotting frame necessary
leaflet(data = fave_places)

# addTiles adds a basemap
leaflet(data = fave_places) |> 
  addTiles()

# longitude and latitude refer to the variables in our data, although this isn't necessary. addMarkers() is just fine.
leaflet(data = fave_places) |> 
  addTiles() |> 
  addMarkers(lng = ~longitude, lat = ~latitude)
```


```{r}
# Load package needed to change color
library(gplots)

# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |> 
  addTiles() |> 
  addCircles(color = col2hex("red"))


# We can change the basemap with addProviderTiles()
# Mark locations with yellow dots. Type providers in the console to view all available providers.
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
  addProviderTiles("USGS") |>
  addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
  addPolylines(
    lng = ~longitude,
    lat = ~latitude,
    color = col2hex("green")) #colors need to us col2hex() function

```

```{r}
#Exercise 3: Starbucks data

# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
# This is to filter the starbucks data to only include MN starbucks
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")


leaflet(data = starbucks_mn) |> 
  addTiles() |> 
  addCircles(color = col2hex("green"))

```


```{r}
#Exercise 3: A simple coordinates (long and latitude) of world starbucks locations
ggplot(starbucks, aes(x = Longitude, y = Latitude)) + geom_point(alpha = 0.2) 

```


```{r}
#Exercise 4: Adding a country-level background to Starbucks map
#Load the package
library(rnaturalearth)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")

# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) + 
  geom_sf()

# Load package needed to change map theme
library(mosaic)

# Add a point for each Starbucks
# NOTE: The Starbucks info is in our starbucks data, not world_boundaries
# How does this change how we use geom_point?!
ggplot(world_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2, color = "darkgreen"
  ) +
  theme_map()


#Exercise 5: Make starbucks map of only some countries (US, CAN, MEX)

# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))

cma_boundaries <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf")

# Just the boundaries
ggplot(cma_boundaries) + 
  geom_sf()

# Add the points
# And zoom in
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50)) +
  theme_map()

```


```{r}
#Exercise 6: State and County level Map

starbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))

# Load packages
library(sf)
library(maps)

# Get the boundaries
midwest_boundaries <- st_as_sf(
  maps::map("county",
            region = c("minnesota", "wisconsin", "north dakota", "south dakota"), 
            fill = TRUE, plot = FALSE))

# Check it out
head(midwest_boundaries)


# Point map (we made this earlier)
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()

# Contour map geom_density_2d instead of geom_point
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_density_2d(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()

```



```{r}
#Exercise 8 Choropleth maps at state and county level election data
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")


# Don't worry about the code to wrangle election data by state and county.
elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))


# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")
# Check it out
head(states_map)
head(elections_by_state) 

##Important detail: Note that the region variable in states_map, and the state_name variable in elections_by_state both label states by the full name in lower case letters. This is critical to the background map and our data being able to communicate.

#Mapping a basic map of repub_pct_20 by state.

# Note where the dataset, elections_by_state, is used
# Note where the background map, states_map, is used
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() 


# Making it nicer!
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_gradientn(name = "% Republican", colors = c("blue", "purple", "red"), values = scales::rescale(seq(0, 100, by = 5)))


#--------------------------------------------------------------
#plotting the descretized version (rep_20_categories)
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map()

# Load package needed for refining color palette
library(RColorBrewer)

# Now fix the colors
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")

#----------------------------------------------------------
#Adding a starbucks layer to our map

starbucks_us <- starbucks |> 
  filter(Country == "US")

# Map it
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  geom_point(
    data = starbucks_us,
    aes(x = Longitude, y = Latitude),
    size = 0.05,
    alpha = 0.2,
    inherit.aes = FALSE
  ) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")


#Knowledge check: We used geom_sf() for point maps. What geom do we use for choropleth maps?
#geom_map()

```

```{r}
#County level Choropleth maps

# Get the latitude and longitude coordinates of county boundaries
library(socviz)
data(county_map) 

# Check it out
head(county_map)

# DATA WRANGLE to communicate with background map
# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))

#mapping republican support by county
ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
  geom_map(map = county_map) +
  scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal()


```




